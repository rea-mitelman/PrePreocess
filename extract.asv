% EXTRACT           extract spike times and waveforms from analogue alphamap data.
%
%           [Y T] = EXTRACT(X,TH,GRAPHICS,MODE)
%
%           input is a single vector X, sampled at Fs KHz
%
%           graphics:   0 doesn't plot (default)
%                       1/2/3/4 plots at the specified column of current fig
%           TH          4.5 std (default)
%                       scalar, in units of std (if mode is 'D2' or 'D2_only')
%                       vector of 2 elements (if mode is 'D2_a2d')
%           mode        'D2' (default)
%                       'D2_only' - returns second derivative in a2d units as Y
%                       'D2_a2d'  - uses the TH argument as is (in a2d units)
%
%           output is a matrix of waveforms (columns) and a vector of times (samples)
%
%           algorithm is Moshe's, based on a modified second derivative, 
%               without statistics update. we assume that consecutive calls
%               are made to this function for a given given channel,
%               therefore the computations are temporally local
%
%           see also PARSE.

% 3-Jul-02 ES

% revisions
% 28-sep-02 modifications
% 30-sep-02 modifications to MSF format of return values; dc removal and detrending
% 17-may-03 SB 7 -> 11
% 16-aug-10 adding the possibility of stimulus artifact removal


function [Y, T] = extract(x,TH,Fs,graphics,mode,stim_times,art_remove_options)

if nargin<2 || isempty(TH), TH = 4.5; end                        % standard deviations
if nargin<3 || isempty(Fs), Fs = 25; end                         % sampling rate in KHz
if nargin<4 || isempty(graphics), graphics = 0; end
% if nargin<5 || isempty(mode), mode = 'D2'; end 
if nargin<5 || isempty(mode), mode = 'D2_fixed_TH_per_subsess'; end 
if nargin<6 , stim_times= []; end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% constants
%


% Changes to correct the fixed num. of samples per spike, to fixed duration
% of spike (in msec.) - Rea Mitelman, Sep. 2010.
% S = 64; % total number of points to save 
% DT = 30; % in samples - changed 30-sep-02
% K = 7;                                                          % derivative backward
% L = 11;                                                         % derivative forward
% SB = 21; %originally was 11;       % number of poitns to save backwards
K_dur=7/25;
K = round(K_dur*Fs);                                                          % derivative backward
L_dur = 11/25;                                                         % derivative forward
L=round(L_dur*Fs);
SB_dur = 21/25; %originally was 11;       % number of poitns to save backwards
SB=round(SB_dur*Fs);
S_dur=64/25;% 64 samples in 25 KHz yields 2.56 ms.
S=round(S_dur*Fs); %This yields 64 samples for Fs=25 KHz, or 128 samples for Fs=50 KHz
DT_dur= 30/25; %dead time, in msec.
DT = round(DT_dur*Fs); % dead time in samples

A2DR = 2^16;                                                    % a2d range
newspike = 0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% extraction
%


% Y = []; Tsam = []; pre-allocating to save time
%% Fix here!
x = remove_artifact_advanced(x,Fs,stim_times,bla,art_remove_options.us_factor, art_remove_options.art_end, art_remove_options.max_dead_time_dur, art_remove_options.);
%%
x2 = x(K+1:end-L) - (x(1:end-L-K) + x(1+L+K:end))/2;            % approx. x''
switch mode
    case 'D2_only'
        Y = x2; return
    case 'D2'
        mmx2 = mean(x2) + [-1 1] * (TH*std(x2));                            % statistics. THIS IS THE LINE THAT FORCES DIFFERENT TH PER FILE!!!
    case 'D2_a2d'
        mmx2 = TH;
	case 'D2_fixed_TH_per_subsess'
		mmx2 = TH';
end
pts = sortrows([parse(find(x2<mmx2(1))); parse(find(x2>mmx2(2)))]);
j = 0; spv = 0; spt = 0;
try 
	Y=NaN(S,size(pts,1));Tsam=NaN(1,size(pts,1)); %pre-allocating to the maximal size to save time...
catch ex
	disp('There might be an Out of memory problem here. Avoiding pre-allocation')
end
for i = 1:size(pts,1) %rows
    ptv = x2(pts(i,1):pts(i,2));                                % potential values
    sgn = unique(sign(ptv));                                    % for negative TH crossing
	if length(sgn)>1
		sgn=1;
		fprintf('This possible error suggests the data is artificial')
		keyboard
	end
    spv_new = max(sgn*ptv);                                     % sometimes already clipped
%     spt_new = pts(i,1)-1+min(find(ptv==sgn*spv_new));           % time of maximal value
    spt_new = pts(i,1)-1+find(ptv==sgn*spv_new, 1 );           % time of maximal value

    if spt_new > spt + DT                                       % ARP | DT
        j = j + 1;  
        newspike = 1;
    elseif spv_new > spv && j >0                                 % WTA
        newspike = 1;
    end
    if newspike                                                 % save time and waveform
        spv = spv_new; spt = spt_new; newspike = 0;
        waveform = x(spt+K-SB+1:min([spt+K+S-SB length(x)]));
        if length(waveform)==S, Y(:,j) = waveform'; Tsam(j) = spt+K; end
%         Y(j) = struct('time',spt+K...
%             ,'waveform',x(spt+K-SB+1:min([spt+K+S-SB length(x)])));
    end
end


last_noNaN_i=find(~isnan(Tsam),1,'last');
Y=Y(:,1:last_noNaN_i);Tsam=Tsam(1:last_noNaN_i); %... and cutting Y and Tsam to the actual size
if any(isnan([Y(:) ; Tsam(:)]))
	fprintf('\nWarning:\n==========\nNaN values in the spikes matrix, this may cause problems downstream\n')
end
% Y=Y(:,1:j);Tsam=Tsam(1:j); %... and cutting Y and Tsam to the actual size
% if ~isempty(Tsam) && isnan(Tsam(end)) %for the cases when j is larger than the actual data size by 1
% 	Tsam=Tsam(1:end-1);
% 	Y=Y(:,1:end-1);
% end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MSF format - time in seconds, dc removal, detrending
%
if graphics, Yraw = Y; end
T = Tsam(:)/Fs/1000;                                            % spike times in seconds
M = size(Y,1);
N = size(Y,2);
% n = (M-1)/2;
dc = ones(1,M);
dc = dc/norm(dc);
m = dc*Y;
for i=1:N                                                       % dc removal
    Y(:,i) = Y(:,i) - m(i)*dc'; 
end
tr = [-(M-1)/2:(M-1)/2];
tr = tr/norm(tr);
m = tr*Y;
for i=1:N                                                       % detrend
    Y(:,i) = Y(:,i) - m(i)*tr';
end
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% graphics
%
if graphics
    % constants
    MARG = 0.03;
    XLEN = 0.5;    %was .25 for 4 elec...
    YLEN = 0.3;
    YTOP = 0.7;     
    YBOT = 0.4;
    FS = 7;         
    TFS = 8;
    % axes
    switch graphics
        case 1, XY = [0 YTOP; 0 YBOT];
        case 2, XY = [0.5 YTOP; 0.5 YBOT]; %was 0,25 instead of 0.5
        case 3, XY = [0.5 YTOP; 0.5 YBOT];
        case 4, XY = [0.75 YTOP; 0.75 YBOT];
        case 5, figure
        otherwise, error('graphics should be 1-4'),
    end
    if graphics == 5
        ah1 = subplot( 2, 1, 1 );
        ah2 = subplot( 2, 1, 2 );
    else
        ah1 = axes('position',[XY(1,:)+MARG XLEN-2*MARG YLEN-2*MARG]);
        ah2 = axes('position',[XY(2,:)+MARG XLEN-2*MARG YLEN-2*MARG]);
    end
    % waveform
    subplot(ah1), plot(x), title(['channel ' num2str(graphics)],'FontSize',TFS,'Color',[0 0 1])
    for i = 1:N
        hold on
        WF = Yraw(:,i); %WF = [Y(i).waveform];
%        WFT = [Y(i).time - SB + 1:1:Y(i).time - SB + S];
        WFT = [Tsam(i) - SB + 1 : 1 : Tsam(i) - SB + S];
        WFT = WFT(1:length(WF));
        plot(WFT,WF,'r')
    end
    set(ah1,'YLim',[-A2DR/2 A2DR/2],'XLim',[0 length(x2)]);
    set(ah1,'FontSize',FS)
    % second derivative
    subplot(ah2), plot(x2)
    title(['TH = ' num2str(TH)],'FontSize',TFS,'Color',[0 0 1])
    for i = 1:N
        hold on % just draw a line
        plot((Tsam(i) - K)*[1 1], mmx2,'r')
    end
    hold on, plot([1 length(x2)],[mmx2(2) mmx2(2)],'r')
    plot([1 length(x2)],[mmx2(1) mmx2(1)],'r'), hold off
    set(ah2,'YLim',[-A2DR/2 A2DR/2],'XLim',[0 length(x2)]);
    set(ah2,'FontSize',FS)
    
end